from scipy.stats import norm
from numba import njit
import numpy as np
import unittest

## necessary to run tests locally if numba-scipy is not installed
from numba_scipy.stats import register_overloads
register_overloads()

# Normal distribution tests
rv = norm


def get_norm_rvs(seed, mean, stdev, size):
    np.random.seed(seed)
    return rv.rvs(mean, stdev, size)


def get_norm_rvs_kwargs(seed, mean, stdev, size):
    np.random.seed(seed)
    return rv.rvs(loc=mean, scale=stdev, size=size)


def get_norm_rvs_w_input(rv, seed, mean, stdev, size):
    np.random.seed(seed)
    return rv.rvs(mean, stdev, size)


def get_norm_rvs_kwargs_w_input(rv, seed, mean, stdev, size):
    np.random.seed(seed)
    return rv.rvs(loc=mean, scale=stdev, size=size)


class TestNormAsConstant(unittest.TestCase):
    def test_rvs_keyword_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate
        """
        py_fc = get_norm_rvs_kwargs
        jit_fc = njit(py_fc)
        py_res, jit_res = py_fc(0, 0, 1, 20), jit_fc(0, 0, 1, 20)
        with self.subTest("Values"):
            # disabling `array_equal` because for some reason 32-bit linux
            # produces floats that are not equal, even though identical to 14
            # decimal points
            # self.assertTrue(np.array_equal(py_res, jit_res))
            self.assertTrue(np.allclose(py_res, jit_res, atol=1e-16))

    def test_rvs_pos_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate
        """
        py_fc = get_norm_rvs
        jit_fc = njit(py_fc)
        py_res, jit_res = py_fc(0, 0, 1, 20), jit_fc(0, 0, 1, 20)

        with self.subTest("Shapes"):
            self.assertEqual(py_res.shape, jit_res.shape)
        with self.subTest("Values"):
            # disabling `array_equal` because for some reason 32-bit linux
            # produces floats that are not equal, even though identical to 14
            # decimal points
            # self.assertTrue(np.array_equal(py_res, jit_res))
            self.assertTrue(np.allclose(py_res, jit_res, atol=1e-16))


class TestNormAsInputPar(unittest.TestCase):
    def test_rvs_keyword_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate
        """
        py_fc = get_norm_rvs_kwargs_w_input
        jit_fc = njit(py_fc)
        py_res, jit_res = py_fc(rv, 0, 0, 1, 20), jit_fc(rv, 0, 0, 1, 20)
        with self.subTest("Values"):
            # disabling `array_equal` because for some reason 32-bit linux
            # produces floats that are not equal, even though identical to 14
            # decimal points
            # self.assertTrue(np.array_equal(py_res, jit_res))
            self.assertTrue(np.allclose(py_res, jit_res, atol=1e-16))

    def test_rvs_pos_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate
        """
        py_fc = get_norm_rvs_w_input
        jit_fc = njit(py_fc)
        py_res, jit_res = py_fc(rv, 0, 0, 1, 20), jit_fc(rv, 0, 0, 1, 20)

        with self.subTest("Shapes"):
            self.assertEqual(py_res.shape, jit_res.shape)
        with self.subTest("Values"):
            # disabling `array_equal` because for some reason 32-bit linux
            # produces floats that are not equal, even though identical to 14
            # decimal points
            # self.assertTrue(np.array_equal(py_res, jit_res))
            self.assertTrue(np.allclose(py_res, jit_res, atol=1e-16))


if __name__ == '__main__':
    unittest.main()
