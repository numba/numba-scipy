import ctypes

import numba
import numpy as np

from .types import numba_long
from .function_pointers import pointers

name_to_numba_signatures = {
    'agm': [(numba.types.float64, numba.types.float64,)],
    'bdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'bdtrc': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'bdtri': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'bdtrik': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'bdtrin': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'bei': [(numba.types.float64,)],
    'beip': [(numba.types.float64,)],
    'ber': [(numba.types.float64,)],
    'berp': [(numba.types.float64,)],
    'besselpoly': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'beta': [(numba.types.float64, numba.types.float64,)],
    'betainc': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'betaincinv': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'betaln': [(numba.types.float64, numba.types.float64,)],
    'binom': [(numba.types.float64, numba.types.float64,)],
    'boxcox': [(numba.types.float64, numba.types.float64,)],
    'boxcox1p': [(numba.types.float64, numba.types.float64,)],
    'btdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'btdtri': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'btdtria': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'btdtrib': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'cbrt': [(numba.types.float64,)],
    'chdtr': [(numba.types.float64, numba.types.float64,)],
    'chdtrc': [(numba.types.float64, numba.types.float64,)],
    'chdtri': [(numba.types.float64, numba.types.float64,)],
    'chdtriv': [(numba.types.float64, numba.types.float64,)],
    'chndtr': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'chndtridf': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'chndtrinc': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'chndtrix': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'cosdg': [(numba.types.float64,)],
    'cosm1': [(numba.types.float64,)],
    'cotdg': [(numba.types.float64,)],
    'dawsn': [(numba.types.float64,)],
    'ellipe': [(numba.types.float64,)],
    'ellipeinc': [(numba.types.float64, numba.types.float64,)],
    'ellipkinc': [(numba.types.float64, numba.types.float64,)],
    'ellipkm1': [(numba.types.float64,)],
    'entr': [(numba.types.float64,)],
    'erf': [(numba.types.float64,)],
    'erfc': [(numba.types.float64,)],
    'erfcx': [(numba.types.float64,)],
    'erfi': [(numba.types.float64,)],
    'eval_chebyc': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_chebys': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_chebyt': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_chebyu': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_gegenbauer': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64, numba.types.float64,)],
    'eval_genlaguerre': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64, numba.types.float64,)],
    'eval_hermite': [(numba_long, numba.types.float64,)],
    'eval_hermitenorm': [(numba_long, numba.types.float64,)],
    'eval_jacobi': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'eval_laguerre': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_legendre': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_sh_chebyt': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_sh_chebyu': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'eval_sh_jacobi': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'eval_sh_legendre': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'exp1': [(numba.types.float64,)],
    'exp10': [(numba.types.float64,)],
    'exp2': [(numba.types.float64,)],
    'expi': [(numba.types.float64,)],
    'expit': [(numba.types.float64,), (numba.types.float32,)],
    'expm1': [(numba.types.float64,)],
    'expn': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'exprel': [(numba.types.float64,)],
    'fdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'fdtrc': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'fdtri': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'fdtridfd': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'gamma': [(numba.types.float64,)],
    'gammainc': [(numba.types.float64, numba.types.float64,)],
    'gammaincc': [(numba.types.float64, numba.types.float64,)],
    'gammainccinv': [(numba.types.float64, numba.types.float64,)],
    'gammaincinv': [(numba.types.float64, numba.types.float64,)],
    'gammaln': [(numba.types.float64,)],
    'gammasgn': [(numba.types.float64,)],
    'gdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'gdtrc': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'gdtria': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'gdtrib': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'gdtrix': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'huber': [(numba.types.float64, numba.types.float64,)],
    'hyp0f1': [(numba.types.float64, numba.types.float64,)],
    'hyp1f1': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'hyp2f1': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'hyperu': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'i0': [(numba.types.float64,)],
    'i0e': [(numba.types.float64,)],
    'i1': [(numba.types.float64,)],
    'i1e': [(numba.types.float64,)],
    'inv_boxcox': [(numba.types.float64, numba.types.float64,)],
    'inv_boxcox1p': [(numba.types.float64, numba.types.float64,)],
    'it2struve0': [(numba.types.float64,)],
    'itmodstruve0': [(numba.types.float64,)],
    'itstruve0': [(numba.types.float64,)],
    'iv': [(numba.types.float64, numba.types.float64,)],
    'ive': [(numba.types.float64, numba.types.float64,)],
    'j0': [(numba.types.float64,)],
    'j1': [(numba.types.float64,)],
    'jv': [(numba.types.float64, numba.types.float64,)],
    'jve': [(numba.types.float64, numba.types.float64,)],
    'k0': [(numba.types.float64,)],
    'k0e': [(numba.types.float64,)],
    'k1': [(numba.types.float64,)],
    'k1e': [(numba.types.float64,)],
    'kei': [(numba.types.float64,)],
    'keip': [(numba.types.float64,)],
    'ker': [(numba.types.float64,)],
    'kerp': [(numba.types.float64,)],
    'kl_div': [(numba.types.float64, numba.types.float64,)],
    'kn': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'kolmogi': [(numba.types.float64,)],
    'kolmogorov': [(numba.types.float64,)],
    'kv': [(numba.types.float64, numba.types.float64,)],
    'kve': [(numba.types.float64, numba.types.float64,)],
    'log1p': [(numba.types.float64,)],
    'log_ndtr': [(numba.types.float64,)],
    'loggamma': [(numba.types.float64,)],
    'logit': [(numba.types.float64,), (numba.types.float32,)],
    'lpmv': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'mathieu_a': [(numba.types.float64, numba.types.float64,)],
    'mathieu_b': [(numba.types.float64, numba.types.float64,)],
    'modstruve': [(numba.types.float64, numba.types.float64,)],
    'nbdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'nbdtrc': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'nbdtri': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba_long, numba_long, numba.types.float64,)],
    'nbdtrik': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nbdtrin': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ncfdtr': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ncfdtri': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ncfdtridfd': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ncfdtridfn': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ncfdtrinc': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nctdtr': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nctdtridf': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nctdtrinc': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nctdtrit': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'ndtr': [(numba.types.float64,)],
    'ndtri': [(numba.types.float64,)],
    'nrdtrimn': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'nrdtrisd': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'obl_cv': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'owens_t': [(numba.types.float64, numba.types.float64,)],
    'pdtr': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'pdtrc': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'pdtri': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'pdtrik': [(numba.types.float64, numba.types.float64,)],
    'poch': [(numba.types.float64, numba.types.float64,)],
    'pro_cv': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'pseudo_huber': [(numba.types.float64, numba.types.float64,)],
    'psi': [(numba.types.float64,)],
    'radian': [(numba.types.float64, numba.types.float64, numba.types.float64,)],
    'rel_entr': [(numba.types.float64, numba.types.float64,)],
    'rgamma': [(numba.types.float64,)],
    'round': [(numba.types.float64,)],
    'sindg': [(numba.types.float64,)],
    'smirnov': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'smirnovi': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'spence': [(numba.types.float64,)],
    'stdtr': [(numba.types.float64, numba.types.float64,)],
    'stdtridf': [(numba.types.float64, numba.types.float64,)],
    'stdtrit': [(numba.types.float64, numba.types.float64,)],
    'struve': [(numba.types.float64, numba.types.float64,)],
    'tandg': [(numba.types.float64,)],
    'tklmbda': [(numba.types.float64, numba.types.float64,)],
    'xlog1py': [(numba.types.float64, numba.types.float64,)],
    'xlogy': [(numba.types.float64, numba.types.float64,)],
    'y0': [(numba.types.float64,)],
    'y1': [(numba.types.float64,)],
    'yn': [(numba.types.float64, numba.types.float64,), (numba_long, numba.types.float64,)],
    'yv': [(numba.types.float64, numba.types.float64,)],
    'yve': [(numba.types.float64, numba.types.float64,)],
    'zetac': [(numba.types.float64,)]
}

name_and_types_to_pointer = {
('agm', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('agm', ('numba.types.float64', 'numba.types.float64',))]),
    ('bdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('bdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('bdtr', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('bdtr', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('bdtrc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('bdtrc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('bdtrc', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('bdtrc', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('bdtri', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('bdtri', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('bdtri', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('bdtri', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('bdtrik', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('bdtrik', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('bdtrin', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('bdtrin', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('bei', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('bei', ('numba.types.float64',))]),
    ('beip', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('beip', ('numba.types.float64',))]),
    ('ber', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ber', ('numba.types.float64',))]),
    ('berp', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('berp', ('numba.types.float64',))]),
    ('besselpoly', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('besselpoly', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('beta', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('beta', ('numba.types.float64', 'numba.types.float64',))]),
    ('betainc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('betainc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('betaincinv', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('betaincinv', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('betaln', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('betaln', ('numba.types.float64', 'numba.types.float64',))]),
    ('binom', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('binom', ('numba.types.float64', 'numba.types.float64',))]),
    ('boxcox', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('boxcox', ('numba.types.float64', 'numba.types.float64',))]),
    ('boxcox1p', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('boxcox1p', ('numba.types.float64', 'numba.types.float64',))]),
    ('btdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('btdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('btdtri', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('btdtri', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('btdtria', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('btdtria', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('btdtrib', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('btdtrib', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('cbrt', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('cbrt', ('numba.types.float64',))]),
    ('chdtr', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chdtr', ('numba.types.float64', 'numba.types.float64',))]),
    ('chdtrc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chdtrc', ('numba.types.float64', 'numba.types.float64',))]),
    ('chdtri', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chdtri', ('numba.types.float64', 'numba.types.float64',))]),
    ('chdtriv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chdtriv', ('numba.types.float64', 'numba.types.float64',))]),
    ('chndtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chndtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('chndtridf', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chndtridf', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('chndtrinc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chndtrinc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('chndtrix', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('chndtrix', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('cosdg', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('cosdg', ('numba.types.float64',))]),
    ('cosm1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('cosm1', ('numba.types.float64',))]),
    ('cotdg', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('cotdg', ('numba.types.float64',))]),
    ('dawsn', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('dawsn', ('numba.types.float64',))]),
    ('ellipe', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ellipe', ('numba.types.float64',))]),
    ('ellipeinc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ellipeinc', ('numba.types.float64', 'numba.types.float64',))]),
    ('ellipkinc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ellipkinc', ('numba.types.float64', 'numba.types.float64',))]),
    ('ellipkm1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ellipkm1', ('numba.types.float64',))]),
    ('entr', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('entr', ('numba.types.float64',))]),
    ('erf', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('erf', ('numba.types.float64',))]),
    ('erfc', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('erfc', ('numba.types.float64',))]),
    ('erfcx', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('erfcx', ('numba.types.float64',))]),
    ('erfi', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('erfi', ('numba.types.float64',))]),
    ('eval_chebyc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_chebyc', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_chebyc', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_chebyc', ('numba_long', 'numba.types.float64',))]),
    ('eval_chebys', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_chebys', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_chebys', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_chebys', ('numba_long', 'numba.types.float64',))]),
    ('eval_chebyt', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_chebyt', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_chebyt', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_chebyt', ('numba_long', 'numba.types.float64',))]),
    ('eval_chebyu', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_chebyu', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_chebyu', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_chebyu', ('numba_long', 'numba.types.float64',))]),
    ('eval_gegenbauer', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_gegenbauer', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_gegenbauer', (numba_long, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double)(pointers[('eval_gegenbauer', ('numba_long', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_genlaguerre', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_genlaguerre', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_genlaguerre', (numba_long, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double)(pointers[('eval_genlaguerre', ('numba_long', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_hermite', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_hermite', ('numba_long', 'numba.types.float64',))]),
    ('eval_hermitenorm', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_hermitenorm', ('numba_long', 'numba.types.float64',))]),
    ('eval_jacobi', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_jacobi', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_jacobi', (numba_long, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_jacobi', ('numba_long', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_laguerre', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_laguerre', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_laguerre', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_laguerre', ('numba_long', 'numba.types.float64',))]),
    ('eval_legendre', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_legendre', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_legendre', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_legendre', ('numba_long', 'numba.types.float64',))]),
    ('eval_sh_chebyt', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_sh_chebyt', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_sh_chebyt', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_sh_chebyt', ('numba_long', 'numba.types.float64',))]),
    ('eval_sh_chebyu', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_sh_chebyu', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_sh_chebyu', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_sh_chebyu', ('numba_long', 'numba.types.float64',))]),
    ('eval_sh_jacobi', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_sh_jacobi', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_sh_jacobi', (numba_long, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_sh_jacobi', ('numba_long', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('eval_sh_legendre', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('eval_sh_legendre', ('numba.types.float64', 'numba.types.float64',))]),
    ('eval_sh_legendre', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('eval_sh_legendre', ('numba_long', 'numba.types.float64',))]),
    ('exp1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('exp1', ('numba.types.float64',))]),
    ('exp10', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('exp10', ('numba.types.float64',))]),
    ('exp2', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('exp2', ('numba.types.float64',))]),
    ('expi', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('expi', ('numba.types.float64',))]),
    ('expit', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('expit', ('numba.types.float64',))]),
    ('expit', (numba.types.float32,)): ctypes.CFUNCTYPE(ctypes.c_float, ctypes.c_float)(pointers[('expit', ('numba.types.float32',))]),
    ('expm1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('expm1', ('numba.types.float64',))]),
    ('expn', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('expn', ('numba.types.float64', 'numba.types.float64',))]),
    ('expn', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('expn', ('numba_long', 'numba.types.float64',))]),
    ('exprel', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('exprel', ('numba.types.float64',))]),
    ('fdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('fdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('fdtrc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('fdtrc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('fdtri', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('fdtri', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('fdtridfd', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('fdtridfd', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('gamma', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('gamma', ('numba.types.float64',))]),
    ('gammainc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gammainc', ('numba.types.float64', 'numba.types.float64',))]),
    ('gammaincc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gammaincc', ('numba.types.float64', 'numba.types.float64',))]),
    ('gammainccinv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gammainccinv', ('numba.types.float64', 'numba.types.float64',))]),
    ('gammaincinv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gammaincinv', ('numba.types.float64', 'numba.types.float64',))]),
    ('gammaln', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('gammaln', ('numba.types.float64',))]),
    ('gammasgn', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('gammasgn', ('numba.types.float64',))]),
    ('gdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('gdtrc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gdtrc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('gdtria', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gdtria', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('gdtrib', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gdtrib', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('gdtrix', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('gdtrix', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('huber', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('huber', ('numba.types.float64', 'numba.types.float64',))]),
    ('hyp0f1', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('hyp0f1', ('numba.types.float64', 'numba.types.float64',))]),
    ('hyp1f1', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('hyp1f1', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('hyp2f1', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('hyp2f1', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('hyperu', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('hyperu', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('i0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('i0', ('numba.types.float64',))]),
    ('i0e', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('i0e', ('numba.types.float64',))]),
    ('i1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('i1', ('numba.types.float64',))]),
    ('i1e', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('i1e', ('numba.types.float64',))]),
    ('inv_boxcox', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('inv_boxcox', ('numba.types.float64', 'numba.types.float64',))]),
    ('inv_boxcox1p', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('inv_boxcox1p', ('numba.types.float64', 'numba.types.float64',))]),
    ('it2struve0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('it2struve0', ('numba.types.float64',))]),
    ('itmodstruve0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('itmodstruve0', ('numba.types.float64',))]),
    ('itstruve0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('itstruve0', ('numba.types.float64',))]),
    ('iv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('iv', ('numba.types.float64', 'numba.types.float64',))]),
    ('ive', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ive', ('numba.types.float64', 'numba.types.float64',))]),
    ('j0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('j0', ('numba.types.float64',))]),
    ('j1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('j1', ('numba.types.float64',))]),
    ('jv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('jv', ('numba.types.float64', 'numba.types.float64',))]),
    ('jve', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('jve', ('numba.types.float64', 'numba.types.float64',))]),
    ('k0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('k0', ('numba.types.float64',))]),
    ('k0e', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('k0e', ('numba.types.float64',))]),
    ('k1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('k1', ('numba.types.float64',))]),
    ('k1e', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('k1e', ('numba.types.float64',))]),
    ('kei', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('kei', ('numba.types.float64',))]),
    ('keip', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('keip', ('numba.types.float64',))]),
    ('ker', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ker', ('numba.types.float64',))]),
    ('kerp', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('kerp', ('numba.types.float64',))]),
    ('kl_div', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('kl_div', ('numba.types.float64', 'numba.types.float64',))]),
    ('kn', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('kn', ('numba.types.float64', 'numba.types.float64',))]),
    ('kn', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('kn', ('numba_long', 'numba.types.float64',))]),
    ('kolmogi', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('kolmogi', ('numba.types.float64',))]),
    ('kolmogorov', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('kolmogorov', ('numba.types.float64',))]),
    ('kv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('kv', ('numba.types.float64', 'numba.types.float64',))]),
    ('kve', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('kve', ('numba.types.float64', 'numba.types.float64',))]),
    ('log1p', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('log1p', ('numba.types.float64',))]),
    ('log_ndtr', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('log_ndtr', ('numba.types.float64',))]),
    ('loggamma', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('loggamma', ('numba.types.float64',))]),
    ('logit', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('logit', ('numba.types.float64',))]),
    ('logit', (numba.types.float32,)): ctypes.CFUNCTYPE(ctypes.c_float, ctypes.c_float)(pointers[('logit', ('numba.types.float32',))]),
    ('lpmv', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('lpmv', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('mathieu_a', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('mathieu_a', ('numba.types.float64', 'numba.types.float64',))]),
    ('mathieu_b', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('mathieu_b', ('numba.types.float64', 'numba.types.float64',))]),
    ('modstruve', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('modstruve', ('numba.types.float64', 'numba.types.float64',))]),
    ('nbdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nbdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nbdtr', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('nbdtr', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('nbdtrc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nbdtrc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nbdtrc', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('nbdtrc', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('nbdtri', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nbdtri', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nbdtri', (numba_long, numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(pointers[('nbdtri', ('numba_long', 'numba_long', 'numba.types.float64',))]),
    ('nbdtrik', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nbdtrik', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nbdtrin', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nbdtrin', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ncfdtr', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ncfdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ncfdtri', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ncfdtri', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ncfdtridfd', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ncfdtridfd', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ncfdtridfn', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ncfdtridfn', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ncfdtrinc', (numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('ncfdtrinc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nctdtr', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nctdtr', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nctdtridf', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nctdtridf', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nctdtrinc', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nctdtrinc', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nctdtrit', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nctdtrit', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('ndtr', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ndtr', ('numba.types.float64',))]),
    ('ndtri', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('ndtri', ('numba.types.float64',))]),
    ('nrdtrimn', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nrdtrimn', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('nrdtrisd', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('nrdtrisd', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('obl_cv', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('obl_cv', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('owens_t', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('owens_t', ('numba.types.float64', 'numba.types.float64',))]),
    ('pdtr', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pdtr', ('numba.types.float64', 'numba.types.float64',))]),
    ('pdtr', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('pdtr', ('numba_long', 'numba.types.float64',))]),
    ('pdtrc', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pdtrc', ('numba.types.float64', 'numba.types.float64',))]),
    ('pdtrc', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('pdtrc', ('numba_long', 'numba.types.float64',))]),
    ('pdtri', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pdtri', ('numba.types.float64', 'numba.types.float64',))]),
    ('pdtri', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('pdtri', ('numba_long', 'numba.types.float64',))]),
    ('pdtrik', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pdtrik', ('numba.types.float64', 'numba.types.float64',))]),
    ('poch', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('poch', ('numba.types.float64', 'numba.types.float64',))]),
    ('pro_cv', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pro_cv', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('pseudo_huber', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('pseudo_huber', ('numba.types.float64', 'numba.types.float64',))]),
    ('psi', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('psi', ('numba.types.float64',))]),
    ('radian', (numba.types.float64, numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('radian', ('numba.types.float64', 'numba.types.float64', 'numba.types.float64',))]),
    ('rel_entr', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('rel_entr', ('numba.types.float64', 'numba.types.float64',))]),
    ('rgamma', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('rgamma', ('numba.types.float64',))]),
    ('round', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('round', ('numba.types.float64',))]),
    ('sindg', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('sindg', ('numba.types.float64',))]),
    ('smirnov', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('smirnov', ('numba.types.float64', 'numba.types.float64',))]),
    ('smirnov', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('smirnov', ('numba_long', 'numba.types.float64',))]),
    ('smirnovi', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('smirnovi', ('numba.types.float64', 'numba.types.float64',))]),
    ('smirnovi', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('smirnovi', ('numba_long', 'numba.types.float64',))]),
    ('spence', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('spence', ('numba.types.float64',))]),
    ('stdtr', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('stdtr', ('numba.types.float64', 'numba.types.float64',))]),
    ('stdtridf', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('stdtridf', ('numba.types.float64', 'numba.types.float64',))]),
    ('stdtrit', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('stdtrit', ('numba.types.float64', 'numba.types.float64',))]),
    ('struve', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('struve', ('numba.types.float64', 'numba.types.float64',))]),
    ('tandg', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('tandg', ('numba.types.float64',))]),
    ('tklmbda', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('tklmbda', ('numba.types.float64', 'numba.types.float64',))]),
    ('xlog1py', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('xlog1py', ('numba.types.float64', 'numba.types.float64',))]),
    ('xlogy', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('xlogy', ('numba.types.float64', 'numba.types.float64',))]),
    ('y0', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('y0', ('numba.types.float64',))]),
    ('y1', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('y1', ('numba.types.float64',))]),
    ('yn', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('yn', ('numba.types.float64', 'numba.types.float64',))]),
    ('yn', (numba_long, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(pointers[('yn', ('numba_long', 'numba.types.float64',))]),
    ('yv', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('yv', ('numba.types.float64', 'numba.types.float64',))]),
    ('yve', (numba.types.float64, numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(pointers[('yve', ('numba.types.float64', 'numba.types.float64',))]),
    ('zetac', (numba.types.float64,)): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(pointers[('zetac', ('numba.types.float64',))])
}
